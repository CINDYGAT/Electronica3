--Se intento agregar el semaforo de la salida de la manana para los peatones, aun no se ha implementado apra la entrada y en la tarde. 
-- Falta agregar buzzer, display 
-- El unico error es que el tiempo en rojo de los peatones y el tiempo en rojo de los carros es el mismo, 20 s
-- para manana dip switch 8 y para la tarde dip switch 7
-- led de entrada D8 verde, D7 amarillo, D6 rojo CARROS
-- led de salida D5 verde, D4 amarillo, D3 rojo CARROS
-- led de salida peatones D2 verde, D1 rojo

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use IEEE.std_logic_unsigned.all;

entity Semaforo is
	Port(
		Clk: in std_logic;
		Selector_manana, Selector_tarde: in std_logic;
		Verde_carros_entrada,Amarillo_carros_entrada,Rojo_carros_entrada:	out std_logic;
		Verde_carros_salida, Amarillo_carros_salida, Rojo_carros_salida: out std_logic;
		Verde_peatones_salida, Rojo_peatones_salida: out std_logic;
		seg: out STD_LOGIC_VECTOR (0 to 2);
		salida: out STD_LOGIC_VECTOR (7 downto 0)
		);
end Semaforo;

architecture Behavioral of Semaforo is

type FSM is (EstadoVerde_carros_entrada, EstadoAmarillo_carros_entrada, EstadoRojo_carros_entrada);
type FSM_salida is (EstadoVerde_carros_salida, EstadoAmarillo_carros_salida, EstadoRojo_carros_salida);
type FSM_peatones is (EstadoVerde_peatones_salida, EstadoRojo_peatones_salida, EstadoRojo2_peatones_salida);

Signal Estado_Semaforo_Entrada_Carros: FSM := EstadoVerde_carros_entrada;  -- Inicializamos en EstadoVerde
Signal Estado_Semaforo_Salida_Carros: FSM_salida := EstadoVerde_carros_salida;  -- Inicializamos en EstadoVerde
Signal Estado_Semaforo_Peatones_Salida: FSM_peatones := EstadoRojo_peatones_salida; -- Inicializamos peatones en rojo

Signal Conteo_entrada: integer range 0 to 240000000 := 0;  -- Contador con un rango apropiado Entrada
Signal Conteo_salida: integer range 0 to 240000000 := 0;  -- Contador con un rango apropiado Salida
Signal Conteo_peatones: integer range 0 to 240000000 := 0;  -- Contador para peatones salida

--signal contador_derecho: integer range 0 to 11999999 := 0;
--signal contador_izquierdo: integer range 0 to 11999999 := 0;
signal contador: integer range 0 to 11999999 := 0;
Signal segundos_derecho: integer range 0 to 34 := 0;  
signal segundos_izquierdo: integer range 0 to 44 := 0;
signal mul: integer range 0 to 12000000 := 0;	         -- Para el multiplexado
signal bandera: integer range 0 to 2 := 0;     -- Indica qué display está activo (multiplexado)
signal numero_derecho: integer range 9 downto 0 := 9;  -- Número que se muestra en el display derecho
signal numero_izquierdo: integer range 9 downto 0 := 9; -- Número que se muestra en el display izquierdo

begin
-------------------------------------Proceso semaforo entrada Carros---------------------------------------------------------------------------------
	Process(Clk)
		Begin
						
      If rising_edge(clk) then
            -- Si ambos switches están en la posición incorrecta, desactivar semáforos
        if (Selector_manana = '1' and Selector_tarde = '1') or (Selector_manana = '0' and Selector_tarde = '0') then
            Verde_carros_entrada <= '0';
            Amarillo_carros_entrada <= '0';
            Rojo_carros_entrada <= '0';
            
        else
                -- Modo mañana (Selector_manana activado, tarde desactivado)
         if Selector_manana = '0' and Selector_tarde = '1' then  -- Inversión lógica si es activo en bajo		
			Case Estado_Semaforo_Entrada_Carros is
				When EstadoVerde_carros_entrada =>
					
					If (Conteo_entrada < 2*120000000) then
						Conteo_entrada <= Conteo_entrada + 1;
						Verde_carros_entrada <= '1';
					else
						Conteo_entrada <= 0;
						Verde_carros_entrada <= '0';
						Estado_Semaforo_Entrada_Carros <= EstadoAmarillo_carros_entrada;
					End if;
					
				When EstadoAmarillo_carros_entrada =>
					
					If (Conteo_entrada < 5999999) then
						Conteo_entrada <= Conteo_entrada + 1;
						Amarillo_carros_entrada <= '1';
					elsif(Conteo_entrada > 5999998 and Conteo_entrada < 12999999) then
						Amarillo_carros_entrada <= '0';
						Conteo_entrada <= Conteo_entrada +1;
					elsif(Conteo_entrada > 12999998 and Conteo_entrada < 17999999) then
						Amarillo_carros_entrada <= '1';
						Conteo_entrada <= Conteo_entrada +1;
					elsif(Conteo_entrada > 17999998 and Conteo_entrada < 23999999) then
						Amarillo_carros_entrada <= '0';
						Conteo_entrada <= Conteo_entrada +1;
					elsif(Conteo_entrada > 23999998 and Conteo_entrada < 29999999) then
						Amarillo_carros_entrada <= '1';
						Conteo_entrada <= Conteo_entrada +1;
					elsif(Conteo_entrada > 29999998 and Conteo_entrada < 35999999) then
						Amarillo_carros_entrada <= '0';
						Conteo_entrada <= Conteo_entrada +1;
					elsif(Conteo_entrada > 35999998 and Conteo_entrada < 41999999) then
						Amarillo_carros_entrada <= '1';
						Conteo_entrada <= Conteo_entrada +1;
					elsif(Conteo_entrada > 41999998 and Conteo_entrada < 47999999) then
						Amarillo_carros_entrada <= '0';
						Conteo_entrada <= Conteo_entrada +1;
					elsif(Conteo_entrada > 47999998 and Conteo_entrada < 53999999) then
						Amarillo_carros_entrada <= '1';
						Conteo_entrada <= Conteo_entrada +1;
					elsif(Conteo_entrada > 53999998 and Conteo_entrada < 59999999) then
						Amarillo_carros_entrada <= '0';
						Conteo_entrada <= Conteo_entrada +1;
					else
						Conteo_entrada <= 0;
						Amarillo_carros_entrada <= '0';
						Estado_Semaforo_Entrada_Carros <= EstadoRojo_carros_entrada;
					End if;
					
				When EstadoRojo_carros_entrada =>
					If (Conteo_entrada < 2*120000000) then
						Conteo_entrada <= Conteo_entrada + 1;
						Rojo_carros_entrada <= '1';
					else
						Conteo_entrada <= 0;
						Rojo_carros_entrada <= '0';
						Estado_Semaforo_Entrada_Carros <= EstadoVerde_carros_entrada;
					End if;
				When Others =>
					Estado_Semaforo_Entrada_Carros <= EstadoVerde_carros_entrada;
			End Case;
		End if;
		End if;
		End if;
	End process;

-------------------------------------------Proceso semaforo salida Carros ---------------------------------------------------------------------------------
	Process(Clk)
		Begin
		
      If rising_edge(clk) then
            -- Si ambos switches están en la posición incorrecta, desactivar semáforos
        if (Selector_manana = '1' and Selector_tarde = '1') or (Selector_manana = '0' and Selector_tarde = '0') then
            Verde_carros_salida <= '0';
            Amarillo_carros_salida <= '0';
            Rojo_carros_salida <= '0';
            
        else
                -- Modo mañana (Selector_manana activado, tarde desactivado)
         if Selector_manana = '0' and Selector_tarde = '1' then  -- Inversión lógica si es activo en bajo		
			Case Estado_Semaforo_Salida_Carros is
				When EstadoVerde_carros_salida =>
					
					If (Conteo_salida < 2*60000000) then
						Conteo_salida <= Conteo_salida + 1;
						Verde_carros_salida <= '1';
					else
						Conteo_salida <= 0;
						Verde_carros_salida <= '0';
						Estado_Semaforo_Salida_Carros <= EstadoAmarillo_carros_salida;
					End if;
					
				When EstadoAmarillo_carros_salida =>
					
					If (Conteo_salida < 5999999) then
						Conteo_salida <= Conteo_salida + 1;
						Amarillo_carros_salida <= '1';
					elsif(Conteo_salida > 5999998 and Conteo_salida < 12999999) then
						Amarillo_carros_salida <= '0';
						Conteo_salida <= Conteo_salida +1;
					elsif(Conteo_salida > 12999998 and Conteo_salida < 17999999) then
						Amarillo_carros_salida <= '1';
						Conteo_salida <= Conteo_salida +1;
					elsif(Conteo_salida > 17999998 and Conteo_salida < 23999999) then
						Amarillo_carros_salida <= '0';
						Conteo_salida <= Conteo_salida +1;
					elsif(Conteo_salida > 23999998 and Conteo_salida < 29999999) then
						Amarillo_carros_salida <= '1';
						Conteo_salida <= Conteo_salida +1;
					elsif(Conteo_salida > 29999998 and Conteo_salida < 35999999) then
						Amarillo_carros_salida <= '0';
						Conteo_salida <= Conteo_salida +1;
					elsif(Conteo_salida > 35999998 and Conteo_salida < 41999999) then
						Amarillo_carros_salida <= '1';
						Conteo_salida <= Conteo_salida +1;
					elsif(Conteo_salida > 41999998 and Conteo_salida < 47999999) then
						Amarillo_carros_salida <= '0';
						Conteo_salida <= Conteo_salida +1;
					elsif(Conteo_salida > 47999998 and Conteo_salida < 53999999) then
						Amarillo_carros_salida <= '1';
						Conteo_salida <= Conteo_salida +1;
					elsif(Conteo_salida > 53999998 and Conteo_salida < 59999999) then
						Amarillo_carros_salida <= '0';
						Conteo_salida <= Conteo_salida +1;
					else
						Conteo_salida <= 0;
						Amarillo_carros_salida <= '0';
						Estado_Semaforo_Salida_Carros <= EstadoRojo_carros_salida;
					End if;
					
				When EstadoRojo_carros_salida =>
					If (Conteo_salida < 2*120000000) then
						Conteo_salida <= Conteo_salida + 1;
						Rojo_carros_salida <= '1';
					else
						Conteo_salida <= 0;
						Rojo_carros_salida <= '0';
						Estado_Semaforo_Salida_Carros <= EstadoVerde_carros_salida;
					End if;
				When Others =>
					Estado_Semaforo_Salida_Carros <= EstadoVerde_carros_salida;
			End Case;
		End if;
		End if;
		End if;
	End process;

-------------------------------------------Proceso semaforo Peatones Salida---------------------------------------------------------------------------------
	Process(Clk)
		Begin
		
      If rising_edge(clk) then
            -- Si ambos switches están en la posición incorrecta, desactivar semáforos
        if (Selector_manana = '1' and Selector_tarde = '1') or (Selector_manana = '0' and Selector_tarde = '0') then
			Verde_peatones_salida <= '0';
         Rojo_peatones_salida <= '0';
            
        else
                -- Modo mañana (Selector_manana activado, tarde desactivado)
         if Selector_manana = '0' and Selector_tarde = '1' then  -- Inversión lógica si es activo en bajo		
			Case Estado_Semaforo_Peatones_Salida is
				When EstadoVerde_peatones_salida =>
					
					If (Conteo_peatones < 2*90000000) then ---15 segundos
						Conteo_peatones <= Conteo_peatones + 1;
						Verde_peatones_salida <= '1';
					else
						Conteo_peatones <= 0;
						Verde_peatones_salida <= '0';
						Estado_Semaforo_Peatones_Salida <= EstadoRojo2_peatones_salida;
					End if;
											
				When EstadoRojo_peatones_salida =>
					If (Conteo_peatones < 2*90000000) then ----- 15 segundos
						Conteo_peatones <= Conteo_peatones + 1;
						Rojo_peatones_salida <= '1';
					else
						Conteo_peatones <= 0;
						Rojo_peatones_salida <= '0';
						Estado_Semaforo_Peatones_Salida <= EstadoVerde_peatones_salida;
					End if;
			
				When EstadoRojo2_peatones_salida =>   ---- 5 segundos adicionales para evitar la desincronizacion de los semaforos
					If (Conteo_peatones < 2*30000000) then ----- 5 segundos
						Conteo_peatones <= Conteo_peatones + 1;
						Rojo_peatones_salida <= '1';
					else
						Conteo_peatones <= 0;
						Rojo_peatones_salida <= '0';
						Estado_Semaforo_Peatones_Salida <= EstadoRojo_peatones_salida;
					End if;
				
				When Others =>
					Estado_Semaforo_Peatones_Salida <= EstadoVerde_peatones_salida;
			End Case;
		End if;
		End if;
		End if;
	End process;

-------------------------------------------- Display salida manana -----------------------------------------------------------------------------
 process(clk)
    begin
        if rising_edge(clk) then
            -- Divisor de reloj para contar 1 segundo para el display derecho
            if contador = 12000000 - 1 then
                contador <= 0;
                segundos_derecho <= segundos_derecho + 1;
					 
					 if segundos_derecho < 34 then
                    segundos_derecho <= segundos_derecho + 1;
                else
                    segundos_derecho <= 0;  -- Reiniciar el contador de segundos
                end if;
					 
            else
                contador <= contador + 1;
            end if;

            -- Divisor de reloj para contar 1 segundo para el display izquierdo
            if contador = 12000000 - 1 then  -- Puedes ajustar el valor según la frecuencia deseada
                contador <= 0;
                segundos_izquierdo <= segundos_izquierdo + 1;
					 
					 if segundos_izquierdo < 44 then
                    segundos_izquierdo <= segundos_izquierdo + 1;
                else
                    segundos_izquierdo <= 0;  -- Reiniciar el contador de segundos
                end if;
					 
            else
                contador <= contador + 1;
            end if;

            -- Multiplexado cada cierto número de ciclos para alternar displays
            if mul = 2000 then
                mul <= 0;
                bandera <= bandera + 1;
                if bandera > 2 then
                    bandera <= 0;  -- Reiniciar el ciclo de multiplexado
                end if;
            else
                mul <= mul + 1;
            end if;

            -- Control del conteo en función de los segundos para el display derecho
            if segundos_derecho >= 21 and segundos_derecho <=29 then
                numero_derecho <= 30 - segundos_derecho;  -- De 9 a 0 en el display derecho (110)
            else
                numero_derecho <= 0;  -- Reiniciar el display derecho cuando no esté en uso
            end if;

            -- Control del conteo en función de los segundos para el display izquierdo
            if segundos_izquierdo >= 31 and segundos_izquierdo <= 39 then
                numero_izquierdo <= 40 - segundos_izquierdo; -- De 9 a 0 en el display izquierdo (011)
            else
                numero_izquierdo <= 0;  -- Reiniciar el display izquierdo cuando no esté en uso
            end if;

            -- Control de encendido de los displays según el multiplexado
            case bandera is
                when 0 =>
                    -- Control del display derecho (110)
                    seg <= "110";  -- Activar display derecho
                    case numero_derecho is
                        when 0 => salida <= "11000000";  -- Muestra 0
                        when 1 => salida <= "11111001";  -- Muestra 1
                        when 2 => salida <= "10100100";  -- Muestra 2
                        when 3 => salida <= "10110000";  -- Muestra 3
                        when 4 => salida <= "10011001";  -- Muestra 4
                        when 5 => salida <= "10010010";  -- Muestra 5
                        when 6 => salida <= "10000010";  -- Muestra 6
                        when 7 => salida <= "11111000";  -- Muestra 7
                        when 8 => salida <= "10000000";  -- Muestra 8
                        when 9 => salida <= "10011000";  -- Muestra 9
                        when others => salida <= "11111111";  -- Apagar display
                    end case;

                when 1 =>
                    -- Control del display izquierdo (011)
                    seg <= "011";  -- Activar display izquierdo
                    case numero_izquierdo is
                        when 0 => salida <= "11000000";  -- Muestra 0
                        when 1 => salida <= "11111001";  -- Muestra 1
                        when 2 => salida <= "10100100";  -- Muestra 2
                        when 3 => salida <= "10110000";  -- Muestra 3
                        when 4 => salida <= "10011001";  -- Muestra 4
                        when 5 => salida <= "10010010";  -- Muestra 5
                        when 6 => salida <= "10000010";  -- Muestra 6
                        when 7 => salida <= "11111000";  -- Muestra 7
                        when 8 => salida <= "10000000";  -- Muestra 8
                        when 9 => salida <= "10011000";  -- Muestra 9
                        when others => salida <= "11111111";  -- Apagar display
                    end case;

                when others =>
                    seg <= "111";  -- Apagar ambos displays
            end case;

        end if;
    end process;

end Behavioral;
					
				When EstadoAmarillo_carros_salida =>
					
					If (Conteo_salida < 5999999) then
						Conteo_salida <= Conteo_salida + 1;
						Amarillo_carros_salida <= '1';
					elsif(Conteo_salida > 5999998 and Conteo_salida < 12999999) then
						Amarillo_carros_salida <= '0';
						Conteo_salida <= Conteo_salida +1;
					elsif(Conteo_salida > 12999998 and Conteo_salida < 17999999) then
						Amarillo_carros_salida <= '1';
						Conteo_salida <= Conteo_salida +1;
					elsif(Conteo_salida > 17999998 and Conteo_salida < 23999999) then
						Amarillo_carros_salida <= '0';
						Conteo_salida <= Conteo_salida +1;
					elsif(Conteo_salida > 23999998 and Conteo_salida < 29999999) then
						Amarillo_carros_salida <= '1';
						Conteo_salida <= Conteo_salida +1;
					elsif(Conteo_salida > 29999998 and Conteo_salida < 35999999) then
						Amarillo_carros_salida <= '0';
						Conteo_salida <= Conteo_salida +1;
					elsif(Conteo_salida > 35999998 and Conteo_salida < 41999999) then
						Amarillo_carros_salida <= '1';
						Conteo_salida <= Conteo_salida +1;
					elsif(Conteo_salida > 41999998 and Conteo_salida < 47999999) then
						Amarillo_carros_salida <= '0';
						Conteo_salida <= Conteo_salida +1;
					elsif(Conteo_salida > 47999998 and Conteo_salida < 53999999) then
						Amarillo_carros_salida <= '1';
						Conteo_salida <= Conteo_salida +1;
					elsif(Conteo_salida > 53999998 and Conteo_salida < 59999999) then
						Amarillo_carros_salida <= '0';
						Conteo_salida <= Conteo_salida +1;
					else
						Conteo_salida <= 0;
						Amarillo_carros_salida <= '0';
						Estado_Semaforo_Salida_Carros <= EstadoRojo_carros_salida;
					End if;
					
				When EstadoRojo_carros_salida =>
					If (Conteo_salida < 2*120000000) then
						Conteo_salida <= Conteo_salida + 1;
						Rojo_carros_salida <= '1';
					else
						Conteo_salida <= 0;
						Rojo_carros_salida <= '0';
						Estado_Semaforo_Salida_Carros <= EstadoVerde_carros_salida;
					End if;
				When Others =>
					Estado_Semaforo_Salida_Carros <= EstadoVerde_carros_salida;
			End Case;
		End if;
		End if;
		End if;
	End process;

-------------------------------------------Proceso semaforo Peatones Salida---------------------------------------------------------------------------------
	Process(Clk)
		Begin
		
      If rising_edge(clk) then
            -- Si ambos switches están en la posición incorrecta, desactivar semáforos
        if (Selector_manana = '1' and Selector_tarde = '1') or (Selector_manana = '0' and Selector_tarde = '0') then
			Verde_peatones_salida <= '0';
         Rojo_peatones_salida <= '0';
            
        else
                -- Modo mañana (Selector_manana activado, tarde desactivado)
         if Selector_manana = '0' and Selector_tarde = '1' then  -- Inversión lógica si es activo en bajo		
			Case Estado_Semaforo_Peatones_Salida is
				When EstadoVerde_peatones_salida =>
					
					If (Conteo_peatones < 2*90000000) then ---15 segundos
						Conteo_peatones <= Conteo_peatones + 1;
						Verde_peatones_salida <= '1';
					else
						Conteo_peatones <= 0;
						Verde_peatones_salida <= '0';
						Estado_Semaforo_Peatones_Salida <= EstadoRojo2_peatones_salida;
					End if;
											
				When EstadoRojo_peatones_salida =>
					If (Conteo_peatones < 2*90000000) then ----- 15 segundos
						Conteo_peatones <= Conteo_peatones + 1;
						Rojo_peatones_salida <= '1';
					else
						Conteo_peatones <= 0;
						Rojo_peatones_salida <= '0';
						Estado_Semaforo_Peatones_Salida <= EstadoVerde_peatones_salida;
					End if;
			
				When EstadoRojo2_peatones_salida =>   ---- 5 segundos adicionales para evitar la desincronizacion de los semaforos
					If (Conteo_peatones < 2*30000000) then ----- 5 segundos
						Conteo_peatones <= Conteo_peatones + 1;
						Rojo_peatones_salida <= '1';
					else
						Conteo_peatones <= 0;
						Rojo_peatones_salida <= '0';
						Estado_Semaforo_Peatones_Salida <= EstadoRojo_peatones_salida;
					End if;
				
				When Others =>
					Estado_Semaforo_Peatones_Salida <= EstadoVerde_peatones_salida;
			End Case;
		End if;
		End if;
		End if;
	End process;

-------------------------------------------- Display salida manana -----------------------------------------------------------------------------
 process(clk)
    begin
        if rising_edge(clk) then
            -- Divisor de reloj para contar 1 segundo para el display derecho
            if contador = 12000000 - 1 then
                contador <= 0;
                segundos_derecho <= segundos_derecho + 1;
					 
					 if segundos_derecho < 34 then
                    segundos_derecho <= segundos_derecho + 1;
                else
                    segundos_derecho <= 0;  -- Reiniciar el contador de segundos
                end if;
					 
            else
                contador <= contador + 1;
            end if;

            -- Divisor de reloj para contar 1 segundo para el display izquierdo
            if contador = 12000000 - 1 then  -- Puedes ajustar el valor según la frecuencia deseada
                contador <= 0;
                segundos_izquierdo <= segundos_izquierdo + 1;
					 
					 if segundos_izquierdo < 44 then
                    segundos_izquierdo <= segundos_izquierdo + 1;
                else
                    segundos_izquierdo <= 0;  -- Reiniciar el contador de segundos
                end if;
					 
            else
                contador <= contador + 1;
            end if;

            -- Multiplexado cada cierto número de ciclos para alternar displays
            if mul = 2000 then
                mul <= 0;
                bandera <= bandera + 1;
                if bandera > 2 then
                    bandera <= 0;  -- Reiniciar el ciclo de multiplexado
                end if;
            else
                mul <= mul + 1;
            end if;

            -- Control del conteo en función de los segundos para el display derecho
            if segundos_derecho >= 21 and segundos_derecho <=29 then
                numero_derecho <= 30 - segundos_derecho;  -- De 9 a 0 en el display derecho (110)
            else
                numero_derecho <= 0;  -- Reiniciar el display derecho cuando no esté en uso
            end if;

            -- Control del conteo en función de los segundos para el display izquierdo
            if segundos_izquierdo >= 31 and segundos_izquierdo <= 39 then
                numero_izquierdo <= 30 - segundos_izquierdo; -- De 9 a 0 en el display izquierdo (011)
            else
                numero_izquierdo <= 0;  -- Reiniciar el display izquierdo cuando no esté en uso
            end if;

            -- Control de encendido de los displays según el multiplexado
            case bandera is
                when 0 =>
                    -- Control del display derecho (110)
                    seg <= "110";  -- Activar display derecho
                    case numero_derecho is
                        when 0 => salida <= "11000000";  -- Muestra 0
                        when 1 => salida <= "11111001";  -- Muestra 1
                        when 2 => salida <= "10100100";  -- Muestra 2
                        when 3 => salida <= "10110000";  -- Muestra 3
                        when 4 => salida <= "10011001";  -- Muestra 4
                        when 5 => salida <= "10010010";  -- Muestra 5
                        when 6 => salida <= "10000010";  -- Muestra 6
                        when 7 => salida <= "11111000";  -- Muestra 7
                        when 8 => salida <= "10000000";  -- Muestra 8
                        when 9 => salida <= "10011000";  -- Muestra 9
                        when others => salida <= "11111111";  -- Apagar display
                    end case;

                when 1 =>
                    -- Control del display izquierdo (011)
                    seg <= "011";  -- Activar display izquierdo
                    case numero_izquierdo is
                        when 0 => salida <= "11000000";  -- Muestra 0
                        when 1 => salida <= "11111001";  -- Muestra 1
                        when 2 => salida <= "10100100";  -- Muestra 2
                        when 3 => salida <= "10110000";  -- Muestra 3
                        when 4 => salida <= "10011001";  -- Muestra 4
                        when 5 => salida <= "10010010";  -- Muestra 5
                        when 6 => salida <= "10000010";  -- Muestra 6
                        when 7 => salida <= "11111000";  -- Muestra 7
                        when 8 => salida <= "10000000";  -- Muestra 8
                        when 9 => salida <= "10011000";  -- Muestra 9
                        when others => salida <= "11111111";  -- Apagar display
                    end case;

                when others =>
                    seg <= "111";  -- Apagar ambos displays
            end case;

        end if;
    end process;

end Behavioral;