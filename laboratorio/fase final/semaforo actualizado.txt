--Se intento agregar el semaforo de la salida de la manana para los peatones, aun no se ha implementado apra la entrada y en la tarde. 
-- Falta agregar buzzer, display 
-- El unico error es que el tiempo en rojo de los peatones y el tiempo en rojo de los carros es el mismo, 20 s
-- para manana dip switch 8 y para la tarde dip switch 7
-- led de entrada D8 verde, D7 amarillo, D6 rojo CARROS
-- led de salida D5 verde, D4 amarillo, D3 rojo CARROS
-- led de salida peatones D2 verde, D1 rojo

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use IEEE.std_logic_unsigned.all;

entity Semaforo is
	Port(
		Clk: in std_logic;
		Selector_manana, Selector_tarde: in std_logic;
		Verde_carros_entrada,Amarillo_carros_entrada,Rojo_carros_entrada:	out std_logic;
		Verde_carros_salida, Amarillo_carros_salida, Rojo_carros_salida: out std_logic;
		Verde_peatones_salida, Rojo_peatones_salida: out std_logic
		);
end Semaforo;

architecture Behavioral of Semaforo is

type FSM is (EstadoVerde_carros_entrada, EstadoAmarillo_carros_entrada, EstadoRojo_carros_entrada);
type FSM_salida is (EstadoVerde_carros_salida, EstadoAmarillo_carros_salida, EstadoRojo_carros_salida);
type FSM_peatones is (EstadoVerde_peatones_salida, EstadoRojo_peatones_salida, EstadoRojo2_peatones_salida);

Signal Estado_Semaforo_Entrada_Carros: FSM := EstadoVerde_carros_entrada;  -- Inicializamos en EstadoVerde
Signal Estado_Semaforo_Salida_Carros: FSM_salida := EstadoVerde_carros_salida;  -- Inicializamos en EstadoVerde
Signal Estado_Semaforo_Peatones_Salida: FSM_peatones := EstadoRojo_peatones_salida; -- Inicializamos peatones en rojo

Signal Conteo_entrada: integer range 0 to 240000000 := 0;  -- Contador con un rango apropiado Entrada
Signal Conteo_salida: integer range 0 to 240000000 := 0;  -- Contador con un rango apropiado Salida
Signal Conteo_peatones: integer range 0 to 240000000 := 0;  -- Contador para peatones salida

begin
-------------------------------------Proceso semaforo entrada Carros---------------------------------------------------------------------------------
	Process(Clk)
		Begin
		
      If rising_edge(clk) then
            -- Si ambos switches están en la posición incorrecta, desactivar semáforos
        if (Selector_manana = '1' and Selector_tarde = '1') or (Selector_manana = '0' and Selector_tarde = '0') then
            Verde_carros_entrada <= '0';
            Amarillo_carros_entrada <= '0';
            Rojo_carros_entrada <= '0';
            
        else
                -- Modo mañana (Selector_manana activado, tarde desactivado)
         if Selector_manana = '0' and Selector_tarde = '1' then  -- Inversión lógica si es activo en bajo		
			Case Estado_Semaforo_Entrada_Carros is
				When EstadoVerde_carros_entrada =>
					
					If (Conteo_entrada < 2*120000000) then
						Conteo_entrada <= Conteo_entrada + 1;
						Verde_carros_entrada <= '1';
					else
						Conteo_entrada <= 0;
						Verde_carros_entrada <= '0';
						Estado_Semaforo_Entrada_Carros <= EstadoAmarillo_carros_entrada;
					End if;
					
				When EstadoAmarillo_carros_entrada =>
					
					If (Conteo_entrada < 5999999) then
						Conteo_entrada <= Conteo_entrada + 1;
						Amarillo_carros_entrada <= '1';
					elsif(Conteo_entrada > 5999998 and Conteo_entrada < 12999999) then
						Amarillo_carros_entrada <= '0';
						Conteo_entrada <= Conteo_entrada +1;
					elsif(Conteo_entrada > 12999998 and Conteo_entrada < 17999999) then
						Amarillo_carros_entrada <= '1';
						Conteo_entrada <= Conteo_entrada +1;
					elsif(Conteo_entrada > 17999998 and Conteo_entrada < 23999999) then
						Amarillo_carros_entrada <= '0';
						Conteo_entrada <= Conteo_entrada +1;
					elsif(Conteo_entrada > 23999998 and Conteo_entrada < 29999999) then
						Amarillo_carros_entrada <= '1';
						Conteo_entrada <= Conteo_entrada +1;
					elsif(Conteo_entrada > 29999998 and Conteo_entrada < 35999999) then
						Amarillo_carros_entrada <= '0';
						Conteo_entrada <= Conteo_entrada +1;
					elsif(Conteo_entrada > 35999998 and Conteo_entrada < 41999999) then
						Amarillo_carros_entrada <= '1';
						Conteo_entrada <= Conteo_entrada +1;
					elsif(Conteo_entrada > 41999998 and Conteo_entrada < 47999999) then
						Amarillo_carros_entrada <= '0';
						Conteo_entrada <= Conteo_entrada +1;
					elsif(Conteo_entrada > 47999998 and Conteo_entrada < 53999999) then
						Amarillo_carros_entrada <= '1';
						Conteo_entrada <= Conteo_entrada +1;
					elsif(Conteo_entrada > 53999998 and Conteo_entrada < 59999999) then
						Amarillo_carros_entrada <= '0';
						Conteo_entrada <= Conteo_entrada +1;
					else
						Conteo_entrada <= 0;
						Amarillo_carros_entrada <= '0';
						Estado_Semaforo_Entrada_Carros <= EstadoRojo_carros_entrada;
					End if;
					
				When EstadoRojo_carros_entrada =>
					If (Conteo_entrada < 2*120000000) then
						Conteo_entrada <= Conteo_entrada + 1;
						Rojo_carros_entrada <= '1';
					else
						Conteo_entrada <= 0;
						Rojo_carros_entrada <= '0';
						Estado_Semaforo_Entrada_Carros <= EstadoVerde_carros_entrada;
					End if;
				When Others =>
					Estado_Semaforo_Entrada_Carros <= EstadoVerde_carros_entrada;
			End Case;
		End if;
		End if;
		End if;
	End process;

-------------------------------------------Proceso semaforo salida Carros ---------------------------------------------------------------------------------
	Process(Clk)
		Begin
		
      If rising_edge(clk) then
            -- Si ambos switches están en la posición incorrecta, desactivar semáforos
        if (Selector_manana = '1' and Selector_tarde = '1') or (Selector_manana = '0' and Selector_tarde = '0') then
            Verde_carros_salida <= '0';
            Amarillo_carros_salida <= '0';
            Rojo_carros_salida <= '0';
            
        else
                -- Modo mañana (Selector_manana activado, tarde desactivado)
         if Selector_manana = '0' and Selector_tarde = '1' then  -- Inversión lógica si es activo en bajo		
			Case Estado_Semaforo_Salida_Carros is
				When EstadoVerde_carros_salida =>
					
					If (Conteo_salida < 2*60000000) then
						Conteo_salida <= Conteo_salida + 1;
						Verde_carros_salida <= '1';
					else
						Conteo_salida <= 0;
						Verde_carros_salida <= '0';
						Estado_Semaforo_Salida_Carros <= EstadoAmarillo_carros_salida;
					End if;
					
				When EstadoAmarillo_carros_salida =>
					
					If (Conteo_salida < 5999999) then
						Conteo_salida <= Conteo_salida + 1;
						Amarillo_carros_salida <= '1';
					elsif(Conteo_salida > 5999998 and Conteo_salida < 12999999) then
						Amarillo_carros_salida <= '0';
						Conteo_salida <= Conteo_salida +1;
					elsif(Conteo_salida > 12999998 and Conteo_salida < 17999999) then
						Amarillo_carros_salida <= '1';
						Conteo_salida <= Conteo_salida +1;
					elsif(Conteo_salida > 17999998 and Conteo_salida < 23999999) then
						Amarillo_carros_salida <= '0';
						Conteo_salida <= Conteo_salida +1;
					elsif(Conteo_salida > 23999998 and Conteo_salida < 29999999) then
						Amarillo_carros_salida <= '1';
						Conteo_salida <= Conteo_salida +1;
					elsif(Conteo_salida > 29999998 and Conteo_salida < 35999999) then
						Amarillo_carros_salida <= '0';
						Conteo_salida <= Conteo_salida +1;
					elsif(Conteo_salida > 35999998 and Conteo_salida < 41999999) then
						Amarillo_carros_salida <= '1';
						Conteo_salida <= Conteo_salida +1;
					elsif(Conteo_salida > 41999998 and Conteo_salida < 47999999) then
						Amarillo_carros_salida <= '0';
						Conteo_salida <= Conteo_salida +1;
					elsif(Conteo_salida > 47999998 and Conteo_salida < 53999999) then
						Amarillo_carros_salida <= '1';
						Conteo_salida <= Conteo_salida +1;
					elsif(Conteo_salida > 53999998 and Conteo_salida < 59999999) then
						Amarillo_carros_salida <= '0';
						Conteo_salida <= Conteo_salida +1;
					else
						Conteo_salida <= 0;
						Amarillo_carros_salida <= '0';
						Estado_Semaforo_Salida_Carros <= EstadoRojo_carros_salida;
					End if;
					
				When EstadoRojo_carros_salida =>
					If (Conteo_salida < 2*120000000) then
						Conteo_salida <= Conteo_salida + 1;
						Rojo_carros_salida <= '1';
					else
						Conteo_salida <= 0;
						Rojo_carros_salida <= '0';
						Estado_Semaforo_Salida_Carros <= EstadoVerde_carros_salida;
					End if;
				When Others =>
					Estado_Semaforo_Salida_Carros <= EstadoVerde_carros_salida;
			End Case;
		End if;
		End if;
		End if;
	End process;

-------------------------------------------Proceso semaforo Peatones Salida---------------------------------------------------------------------------------
	Process(Clk)
		Begin
		
      If rising_edge(clk) then
            -- Si ambos switches están en la posición incorrecta, desactivar semáforos
        if (Selector_manana = '1' and Selector_tarde = '1') or (Selector_manana = '0' and Selector_tarde = '0') then
			Verde_peatones_salida <= '0';
         Rojo_peatones_salida <= '0';
            
        else
                -- Modo mañana (Selector_manana activado, tarde desactivado)
         if Selector_manana = '0' and Selector_tarde = '1' then  -- Inversión lógica si es activo en bajo		
			Case Estado_Semaforo_Peatones_Salida is
				When EstadoVerde_peatones_salida =>
					
					If (Conteo_peatones < 2*90000000) then ---15 segundos
						Conteo_peatones <= Conteo_peatones + 1;
						Verde_peatones_salida <= '1';
					else
						Conteo_peatones <= 0;
						Verde_peatones_salida <= '0';
						Estado_Semaforo_Peatones_Salida <= EstadoRojo2_peatones_salida;
					End if;
											
				When EstadoRojo_peatones_salida =>
					If (Conteo_peatones < 2*90000000) then ----- 15 segundos
						Conteo_peatones <= Conteo_peatones + 1;
						Rojo_peatones_salida <= '1';
					else
						Conteo_peatones <= 0;
						Rojo_peatones_salida <= '0';
						Estado_Semaforo_Peatones_Salida <= EstadoVerde_peatones_salida;
					End if;
			
				When EstadoRojo2_peatones_salida =>   ---- 5 segundos adicionales para evitar la desincronizacion de los semaforos
					If (Conteo_peatones < 2*30000000) then ----- 5 segundos
						Conteo_peatones <= Conteo_peatones + 1;
						Rojo_peatones_salida <= '1';
					else
						Conteo_peatones <= 0;
						Rojo_peatones_salida <= '0';
						Estado_Semaforo_Peatones_Salida <= EstadoRojo_peatones_salida;
					End if;
				
				When Others =>
					Estado_Semaforo_Peatones_Salida <= EstadoVerde_peatones_salida;
			End Case;
		End if;
		End if;
		End if;
	End process;


end Behavioral;